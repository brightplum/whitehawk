<?php
/**
 * @file
 * Code for the WHG Features feature.
 */

include_once 'whg_features.features.inc';
define('WHG_PASS', crypt('thewhitehawkgroup', 'salt+deni+dan'));

/**
 * Implements hook_init().
 */
function whg_features_init() {
    if (!user_is_anonymous()) {
        global $user;
        $path = menu_get_item();

        if (!user_access('administer site configuration')) {
            // hide non active dashboard panels
            if ($path['path'] == 'admin/dashboard') {
                if (!in_array('Case Manager', $user->roles)) {
                    drupal_add_css(drupal_get_path('module', 'whg_features') . '/css/hide_dashboard_case_manager.css');
                }
                if (!in_array('Coach', $user->roles)) {
                    drupal_add_css(drupal_get_path('module', 'whg_features') . '/css/hide_dashboard_coach.css');
                }
                if (!in_array('administrator', $user->roles)) {
                    drupal_add_css(drupal_get_path('module', 'whg_features') . '/css/hide_dashboard_admin.css');
                }
            }
        }

        // add additional css to user view
        if ($path['path'] == 'user/%') {
            drupal_add_css(drupal_get_path('module', 'whg_features') . '/css/rubik_custom.css');
        }
    }

}

/**
 * Implements hook_menu().
 */
function whg_features_menu() {
    $items = array();

    $items['choose-page-type'] = array(
        'title' => 'Choose Page Type',
        'page callback' => 'whg_features_choose_page_type',
        'access arguments' => array('administer nodes'),
        'type' => MENU_CALLBACK,
    );

    $items['styleguide'] = array(
        'title' => 'Styleguide',
        'page callback' => 'theme',
        'page arguments' => array('whg_features_styleguide'),
        'access arguments' => array('access styleguide'),
    );

    $items['admin/sync-status-codes'] = array(
        'title' => 'Sync Status codes',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('whg_features_sync_status_codes_form'),
        'access arguments' => array('administer site configuration'),
        'file' => 'includes/forms.inc',
    );

    return $items;
}

/**
 * Implements hook_permission().
 */
function whg_features_permission() {
  return array(
    'access styleguide' => array(
      'title' => t('Access Styleguide'),
      'description' => t('Access the styleguide for the WHG (Karma) theme.'),
    ),
  );
}

function whg_features_user_view($account, $view_mode, $langcode) {
    if ($view_mode == 'full') {
        $user_totals = whg_features_cmr_user_totals_block();
        if (!empty($user_totals)) {
            $account->content['case_management'] = array(
                '#title' => t('Case Management'),
                '#markup' => $user_totals['content'],
                '#weight' => 99,
            );
        }
    }
}

/**
 * Implements hook_admin_paths().
 *
 * @return array
 *   Admin paths.
 */
function whg_features_admin_paths() {
  $paths = array(
    'choose-page-type' => true,
  );
  return $paths;
}

/**
 * Implements hook_node_access().
 *
 * @param object $node
 *   The node object.
 *
 * @param $op
 * @param $account
 *
 * @return mixed
 */
function whg_features_node_access($node, $op, $account) {
  $access = NODE_ACCESS_IGNORE;
  switch ($op) {
    case 'view':
      if (is_object($node) && ($node->type == 'page')) {
        $access = NODE_ACCESS_DENY;
        $privacy = field_get_items('node', $node, 'field_privacy');
        $privacy = (is_array($privacy)) ? reset($privacy) : $privacy;
        $privacy = (isset($privacy['value'])) ? $privacy['value'] : 1;

        // If page is public, user is auth, or secret key, show.
        if (($privacy == 1) || (!user_is_anonymous()) || whg_features_check_bypass()) {
          $access = NODE_ACCESS_ALLOW;
        }
      }
      break;

      case 'update':
          switch ($node->type) {
              case 'cmr':
                  // if set to final, disallow editing
                  $final = field_get_items('node', $node, 'field_cmr_final');
                  $final = is_array($final) ? reset($final) : $final;
                  if ($final['value'] == 'true') {
                      global $user;
                      if (!in_array('Case Manager', $user->roles)) {
                          $access = NODE_ACCESS_DENY;
                      }
                  }
                  break;
          }
          break;
  }
  return $access;
}

/**
 * Implements hook_node_insert().
 *
 * @param $node
 */
function whg_features_node_insert($node) {
    if ($node->type == 'cmr') {
        whg_features_set_user_status_code($node);
    }
}

/**
 * Implements hook_node_update().
 *
 * @param $node
 */
function whg_features_node_update($node) {
    if ($node->type == 'cmr') {
        whg_features_set_user_status_code($node);
    }
}

/**
 * Synchronize CMR status with user status.
 *
 * @param $node
 */
function whg_features_set_user_status_code($node) {
    // Get the code set on the cmr.
    $code = field_get_items('node', $node, 'field_cmr_status_code');
    $code = is_array($code) ? reset($code) : $code;
    $code = isset($code['value']) ? $code['value'] : false;

    // Get the user id for the cmr.
    $uid = field_get_items('node', $node, 'field_cmr_associated_record');
    $uid = is_array($uid) ? reset($uid) : $uid;
    $uid = isset($code['uid']) ? $uid['uid'] : false;

    // Get the final status
    $final = field_get_items('node', $node, 'field_cmr_final');
    $final = is_array($final) ? reset($final) : $final;
    $final = isset($final['value']) ? $final['value'] : false;
    $final = ($final === 'true') ? true : false;
    dpm($final);

    // Only change the code if final and uid is exists.
    if (is_numeric($uid) && ($uid != 0) && $final) {
        $user = user_load($uid);
        $user = entity_metadata_wrapper('user', $user);
        $user->field_cmr_status_code->set($code);
        $user->save();
    }
}

/**
 * Implements hook_block_info().
 */
function whg_features_block_info() {
    $blocks = array();

    $blocks['crc_nav_accordion'] = array(
        'info' => t('WHG CRC Accordion Menu'),
    );

    $blocks['cmr_user_totals'] = array(
        'info' => t('WHG CMR User Totals'),
    );

    return $blocks;
}

/**
 * Implements hook_block_view().
 */
function whg_features_block_view($delta) {
    $data = array(
        'subject' => '',
        'content' => '',
    );
    switch ($delta) {
        case 'crc_nav_accordion':
            $data = whg_features_crc_nav_accordion_block();
            break;

        case 'cmr_user_totals':
            $data = whg_features_cmr_user_totals_block();
            break;
    }
    return $data;
}

/**
 * Custom CRC accordion menu in block.
 */
function whg_features_crc_nav_accordion_block() {
    $output = '';
    $menu = menu_tree_output(menu_tree_page_data('menu-crc-menu', $max_depth = 3));
    foreach ($menu as $item) {
        if (isset($item['#title'])) {
            // If in active trail, set opener open.
            $active = (isset($item['#attributes']['class']) && in_array('active-trail', $item['#attributes']['class']))
              ? ' default-open'
              : null;
            $open = (isset($active)) ? ' ui-state-active' : null;
            $output .= '<li><a href="' . drupal_get_path_alias($item['#href']) . '" class="opener' . $open . '"><strong>' . $item['#title'] . '</strong></a>';
            if (!empty($item['#below'])) {
                $parameters = drupal_get_query_parameters();
                // Add auth link if available to each child link.
                if (isset($parameters['auth'])) {
                    foreach ($item['#below'] as $key => $value) {
                        if (is_numeric($key)) {
                            $item['#below'][$key]['#localized_options'] = array(
                                'query' => array(
                                    'auth' => $parameters['auth'],
                                ),
                            );
                        }
                    }
                }
                $output .= '<div class="slide-holder' . $active . '">
              <div class="slide">';
                $output .= (!empty($item['#below'])) ? drupal_render($item['#below']) : null;
                $output .= '</div></div>';
            }
            $output .= '</li>';
        }
    }
    $content = '<ul class="accordion">' . $output . '</ul>';
    $data['subject'] = null;
    $data['content'] = $content;
    return $data;
}

/**
 * Custom block to show CMR totals.
 *
 * @return array
 */
function whg_features_cmr_user_totals_block() {
    $user = menu_get_object('user');
    $latest_cmr_nid = whg_features_latest_cmr($user->uid);
    $latest_cmr = ($latest_cmr_nid) ? node_load($latest_cmr_nid) : false;
    $data = array();

    if (is_object($latest_cmr)) {
        $cmr_fields = array(
            'field_cmr_service_started' => t('Service Started'),
            'field_cmr_last_contact' => t('Date of Last Contact'),
            'field_cmr_inactivation_date' => t('Inactivation Date'),
            'field_cmr_status_code' => t('Code'),
            'field_cmr_hours' => t('Total Hours'),
            'field_cmr_phase' => t('Phase'),
            'field_cmr_service_fee' => t('Coaching Fees'),
            'non-coaching_fees' => t('Non-Coaching Fees'),
            'total_amount' => t('Total Invoiced Amount'),
            'field_cmr_remarks' => t('Last Remarks'),
        );

        $calc_fields = array(
            'field_cmr_hours',
            'field_cmr_service_fee',
            'non-coaching_fees',
            'total_amount',
        );

        $display_fields = array();

        $display_fields[]['data'] = '<strong>Report Submitted:</strong> ' . format_date($latest_cmr->created, 'short');

        foreach ($cmr_fields as $cmr_field => $display) {
            if (!in_array($cmr_field, $calc_fields)) {
                if ($cmr_field == 'field_cmr_service_started') {
                  $date = whg_features_latest_service_date($user->uid);
                  $date = isset($date) ? format_date(strtotime($date), 'short') : '';
                } else {
                  $item = field_view_field('node', $latest_cmr, $cmr_field);
                }
                if (isset($item['#items'])
                  && is_string($item['#items'][0]['value'])
                  && strpos($item['#items'][0]['value'], '00:00')
                ) {
                    $item = format_date(strtotime($item['#items'][0]['value']), 'short');
                } else {
                    $item = (isset($item[0]['#markup'])) ? html_entity_decode($item[0]['#markup']) : '';
                }
            } else {
                switch ($cmr_field) {
                    case 'non-coaching_fees':
                        $item = whg_features_cmr_totals(
                            $user->uid,
                            'field_ncf_coaching_fee_amount',
                            'non_coaching_fees',
                            'field_ncf_associated_record'
                        );
                        $item = !empty($item) ? '$' . $item : $item;
                        break;

                    case 'field_cmr_service_fee':
                    case 'total_amount':
                        $item = whg_features_cmr_totals($user->uid, $cmr_field);
                        $item = !empty($item) ? '$' . $item : $item;
                        break;

                    default:
                        $item = whg_features_cmr_totals($user->uid, $cmr_field);
                        break;
                }
            }
            $item = (isset($date)) ? $date : $item;
            $display_fields[]['data'] = '<strong>' . $display . ':</strong> ' . $item;
            unset($date, $item);
        }

        $data['content'] = theme('fieldset', 
		array(
			'element' => array(
				'#title' => 'Case Management',
				'#value' => theme('item_list', array('items' => $display_fields))
			),
		)
	);
    }
    return $data;

}

/**
 * Return latest CMR.
 *
 * @param $uid
 * @return bool|mixed
 */
function whg_features_latest_cmr($uid) {
    $query = new EntityFieldQuery();
    $query
      ->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'cmr')
      ->propertyCondition('status', 1)
      ->fieldCondition('field_cmr_associated_record', 'uid', $uid)
      ->fieldCondition('field_cmr_final', 'value', 'true')
      ->propertyOrderBy('created', 'DESC')
      ->range(0, 1);
    ;
    $result = $query->execute();
    if (!empty($result)) {
        $return = array_keys($result['node']);
        $return = reset($return);
    } else {
        $return = false;
    }

    return $return;
}

function whg_features_latest_service_date($uid) {
    $query = new EntityFieldQuery();
    $query
       ->entityCondition('entity_type', 'node')
       ->entityCondition('bundle', 'cmr')
       ->propertyCondition('status', 1)
       ->fieldCondition('field_cmr_associated_record', 'uid', $uid)
       ->fieldCondition('field_cmr_final', 'value', 'true')
       ->propertyOrderBy('created', 'DESC');
    $result = $query->execute();
    $start_date = null;
   
    if (!empty($result)) {
      $nids = array_keys($result['node']);
      $nodes = node_load_multiple($nids);
      foreach ($nodes as $node) {
        $start_date = field_get_items('node', $node, 'field_cmr_service_started');
        if (is_array($start_date)) {
          $start_date = reset($start_date);
          $start_date = isset($start_date['value']) ? $start_date['value'] : false;
          break;
        }
      }
    }

    return $start_date;
}

/**
 * Return CMR total values.
 *
 * @param $uid
 * @param $field
 * @param string $bundle
 * @param string $condition
 * @return number|string
 */
function whg_features_cmr_totals($uid, $field, $bundle = 'cmr', $condition = 'field_cmr_associated_record') {
    $query = new EntityFieldQuery();
    $query
      ->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', $bundle)
      ->propertyCondition('status', 1)
      ->fieldCondition($condition, 'uid', $uid);
    $result = $query->execute();
    if (!empty($result)) {
        $totals = array();
        foreach ($result['node'] as $nid => $value) {
            $node = node_load($nid);
            $item = field_get_items('node', $node, $field);
            $item = is_array($item) ? reset($item) : $item;
            $item = isset($item['value']) ? $item['value'] : $item;
            $totals[] = $item;
        }
        $return = array_sum($totals);

    } else {
        $return = '';
    }

    return $return;

}


/**
 * Implements hook_FORM_ID_form_alter().
 *
 * Alter page nodes.
 */
function whg_features_form_page_node_form_alter(&$form, &$form_state, $form_id) {
  $parameters = drupal_get_query_parameters();
  if (!isset($parameters['page-type']) && (arg(0) == 'node') && (arg(1) == 'add')) {
    drupal_goto('choose-page-type');
  }
  else {
    if (isset($parameters['page-type'])) {
      switch ($parameters['page-type']) {
        case 'public':
          $form['field_privacy'][LANGUAGE_NONE]['#default_value'] = 1;
          $form['field_privacy']['#disabled'] = true;
          $form['field_main_nav'][LANGUAGE_NONE]['#default_value'] = 1;
          $form['field_main_nav']['#disabled'] = true;
          break;

        case 'crc':
          $form['field_privacy'][LANGUAGE_NONE]['#default_value'] = 0;
          $form['field_privacy']['#disabled'] = true;
          $form['field_main_nav'][LANGUAGE_NONE]['#default_value'] = 0;
          $form['field_main_nav']['#disabled'] = true;
          break;
      }
    }
  }
}

/**
 * Implements hook_form_cmr_node_form_alter().
 *
 * @param $form
 * @param $form_state
 */
function whg_features_form_cmr_node_form_alter(&$form, &$form_state) {
    $params = drupal_get_query_parameters();
    $properties = (isset($params['destination'])) ? explode('/', $params['destination']) : null;
    if (isset($properties) && is_numeric($properties[1])) {
        $form['field_cmr_associated_record'][LANGUAGE_NONE][0]['uid']['#default_value'] = $properties[1];
        $form['field_cmr_associated_record'][LANGUAGE_NONE][0]['uid']['#disabled'] = true;
        $form['field_cmr_computed_into_record'][LANGUAGE_NONE]['#access'] = false;
    }
}

/**
 * Implements hook_form_user_profile_form_alter().
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function whg_features_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
    if (!user_access('administer site configuration')) {
        $form['account']['name']['#disabled'] = true;
        $form['account']['status']['#disabled'] = true;
        $form['account']['roles']['#disabled'] = true;
        $form['field_user_client_id']['#disabled'] = true;
        $form['field_user_coach']['#disabled'] = true;
    }
}

/**
 * Implements hook_views_pre_render().
 *
 * @param $view
 */
function whg_features_views_pre_render(&$view) {
    // Remove duplicate entries
    switch ($view->name) {
        case 'active_clients':
            $existing_record = array();
            $results = $view->result;
            foreach ($view->result as $key => $result) {
                $uid = $result->uid;
                if (!in_array($uid, $existing_record)) {
                    $existing_record[] = $uid;
                } else {
                    unset($results[$key]);
                }
            }
            $results = array_values($results);
            $view->result = $results;
            break;
    }
}

/**
 * Alter the date_combo element after the Date module is finished with it.
 *
 * @param array $element
 *   The $element array.
 * @param array $form_state
 *   A keyed array containing the current state of the form.
 * @param array $context
 *   An associative array containing the following keys:
 *   - field: The $field array.
 *   - instance: The $instance array.
 *   - form: Nested array of form elements that comprise the form.
 */
function whg_features_date_combo_process_alter(&$element, &$form_state, $context) {
  $element['value']['#date_format'] = 'm/d/Y';
}

/**
 * Give a list of page types to choose from.
 *
 * @return array
 *   A render array of a table.
 */
function whg_features_choose_page_type() {
  $rows = $page_types = $build = array();

  $page_types[] = array(
    'link' => l(t('Create Public Page'), 'node/add/page', array('query' => array('page-type' => 'public'))),
    'description' => t('A public page is for everyone to see and is used by main site.'),
  );
  $page_types[] = array(
    'link' => l(t('Create CRC Page'), 'node/add/page', array('query' => array('page-type' => 'crc'))),
    'description' => t('A crc page is only accessible to users who have accounts to the CRC.'),
  );

  foreach ($page_types as $page_type) {
    $row = array();
    $row[] = array('data' => $page_type['link']);
    $row[] = array('data' => $page_type['description']);
    $rows[] = $row;
  }

  $header = array(t('Page Type'), t('Description'));

  $build['page_layout_table'] = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
  );

  return $build;
}

/**
 * Implements of hook_theme().
 */
function whg_features_theme($existing, $type, $theme, $path) {
  return array(
    'whg_features_styleguide' => array(
      'template' => 'whg-features-styleguide',
    ),
  );
}

/**
 * Auth check function.
 *
 * @param $phrase
 * @return bool
 */
function whg_features_salt($phrase) {
  return (WHG_PASS == $phrase) ? true : null;
}

/**
 * Check if bypass conditions are met.
 */
function whg_features_check_bypass() {
  $key = null;
  $parameters = drupal_get_query_parameters();
  if (isset($parameters['auth'])) {
    $key = whg_features_salt($parameters['auth']);
  }
  return $key;
}

/**
 * Batch operation to sync status codes.
 *
 * @return array
 */
function whg_features_sync_status_codes() {
    $query = new EntityFieldQuery();
    $query
      ->entityCondition('entity_type', 'user')
      ->propertyCondition('status', 1)
      ->propertyOrderBy('created', 'DESC');
    $results = $query->execute();
    $operations = array();
    foreach ($results['user'] as $uid => $value) {
        $operations[] = array('whg_features_sync_user_status_code', array($uid));
    }

    $batch = array(
        'operations' => $operations,
        'finished' => 'whg_features_sync_status_codes_finished',
    );
    return $batch;
}

/**
 * Batch callback to sync status code.
 *
 * @param $uid
 * @param $context
 */
function whg_features_sync_user_status_code($uid, &$context) {
    $cmr_nid = whg_features_latest_cmr($uid);
    if (is_numeric($cmr_nid)) {
        $cmr = node_load($cmr_nid);
        whg_features_set_user_status_code($cmr);
        $context['results'][] = $cmr_nid . ' : ' . check_plain($cmr->title);
        $context['message'] = t('Loading node "@title for @uid"', array('@title' => $cmr->title, '@uid' => $uid));
    }
}

/**
 * Finished batch callback.
 *
 * @param $success
 * @param $results
 */
function whg_features_sync_status_code_finished($success, $results) {
    if ($success) {
        drupal_set_message(t('@count results processed.', array('@count' => count($results))));
    } else {
        $error_operation = reset($operations);
        drupal_set_message(t('An error occurred while processing @operation with arguments : @args', array('@operation' => $error_operation[0], '@args' => print_r($error_operation[0], true))));
    }
}
